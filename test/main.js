//              [ 0,  1,  2]
//              [ 3,  4,  5]
//              [ 6,  7,  8]
// [ 9, 10, 11] [18, 19, 20] [27, 28, 29]
// [12, 13, 14] [21, 22, 23] [30, 31, 32]
// [15, 16, 17] [24, 25, 26] [33, 34, 35]
//              [36, 37, 38]
//              [39, 40, 41]
//              [42, 43, 44]
//              [45, 46, 47]
//              [48, 49, 50]
//              [51, 52, 53]
// R [ 6, 3, 0, 7, 4, 1, 8, 5, 2 ]
// L [ 2, 5, 8, 1, 4, 7, 0, 3, 6 ]
const assert = require('assert');
const Cube = require('../dist/cube.js');
describe('Cube', () => {
    describe('#rotate()', () => {
        let cube;
        beforeEach(() => {
            cube = new Cube({
                U: [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],
                L: [ 9, 10, 11, 12, 13, 14, 15, 16, 17 ],
                F: [ 18, 19, 20, 21, 22, 23, 24, 25, 26 ],
                R: [ 27, 28, 29, 30, 31, 32, 33, 34, 35 ],
                D: [ 36, 37, 38, 39, 40, 41, 42, 43, 44 ],
                B: [ 45, 46, 47, 48, 49, 50, 51, 52, 53 ]
            });
        });
        it('R', () => {
            cube.rotate('R');
            assert.deepEqual(cube.face, {
                U: [ 0, 1, 20, 3, 4, 23, 6, 7, 26 ],
                L: [ 9, 10, 11, 12, 13, 14, 15, 16, 17 ],
                F: [ 18, 19, 38, 21, 22, 41, 24, 25, 44 ],
                R: [ 33, 30, 27, 34, 31, 28, 35, 32, 29 ],
                D: [ 36, 37, 47, 39, 40, 50, 42, 43, 53 ],
                B: [ 45, 46, 2, 48, 49, 5, 51, 52, 8 ]
            });
        });
        it("R'", () => {
            cube.rotate("R'");
            assert.deepEqual(cube.face, {
                U: [ 0, 1, 47, 3, 4, 50, 6, 7, 53 ],
                L: [ 9, 10, 11, 12, 13, 14, 15, 16, 17 ],
                F: [ 18, 19, 2, 21, 22, 5, 24, 25, 8 ],
                R: [ 29, 32, 35, 28, 31, 34, 27, 30, 33 ],
                D: [ 36, 37, 20, 39, 40, 23, 42, 43, 26 ],
                B: [ 45, 46, 38, 48, 49, 41, 51, 52, 44 ]
            });
        });
        it('L', () => {
            cube.rotate('L');
            assert.deepEqual(cube.face, {
                U: [ 45, 1, 2, 48, 4, 5, 51, 7, 8 ],
                L: [ 15, 12, 9, 16, 13, 10, 17, 14, 11 ],
                F: [ 0, 19, 20, 3, 22, 23, 6, 25, 26 ],
                R: [ 27, 28, 29, 30, 31, 32, 33, 34, 35 ],
                D: [ 18, 37, 38, 21, 40, 41, 24, 43, 44 ],
                B: [ 36, 46, 47, 39, 49, 50, 42, 52, 53 ]
            });
        });
        it("L'", () => {
            cube.rotate("L'");
            assert.deepEqual(cube.face, {
                U: [ 18, 1, 2, 21, 4, 5, 24, 7, 8 ],
                L: [ 11, 14, 17, 10, 13, 16, 9, 12, 15 ],
                F: [ 36, 19, 20, 39, 22, 23, 42, 25, 26 ],
                R: [ 27, 28, 29, 30, 31, 32, 33, 34, 35 ],
                D: [ 45, 37, 38, 48, 40, 41, 51, 43, 44 ],
                B: [ 0, 46, 47, 3, 49, 50, 6, 52, 53 ]
            });
        });
        it('F', () => {
            cube.rotate('F');
            assert.deepEqual(cube.face, {
                U: [ 0, 1, 2, 3, 4, 5, 17, 14, 11 ],
                L: [ 9, 10, 36, 12, 13, 37, 15, 16, 38 ],
                F: [ 24, 21, 18, 25, 22, 19, 26, 23, 20 ],
                R: [ 6, 28, 29, 7, 31, 32, 8, 34, 35 ],
                D: [ 33, 30, 27, 39, 40, 41, 42, 43, 44 ],
                B: [ 45, 46, 47, 48, 49, 50, 51, 52, 53 ]
            });
        })
        it("F'", () => {
            cube.rotate("F'");
            assert.deepEqual(cube.face, {
                U: [ 0, 1, 2, 3, 4, 5, 27, 30, 33 ],
                L: [ 9, 10, 8, 12, 13, 7, 15, 16, 6 ],
                F: [ 20, 23, 26, 19, 22, 25, 18, 21, 24 ],
                R: [ 38, 28, 29, 37, 31, 32, 36, 34, 35 ],
                D: [ 11, 14, 17, 39, 40, 41, 42, 43, 44 ],
                B: [ 45, 46, 47, 48, 49, 50, 51, 52, 53 ]
            });
        });
        it('B', () => {
            cube.rotate('B');
            assert.deepEqual(cube.face, {
                U: [ 29, 32, 35, 3, 4, 5, 6, 7, 8 ],
                L: [ 2, 10, 11, 1, 13, 14, 0, 16, 17 ],
                F: [ 18, 19, 20, 21, 22, 23, 24, 25, 26 ],
                R: [ 27, 28, 44, 30, 31, 43, 33, 34, 42 ],
                D: [ 36, 37, 38, 39, 40, 41, 9, 12, 15 ],
                B: [ 51, 48, 45, 52, 49, 46, 53, 50, 47 ]
            });
        });
        it("B'", () => {
            cube.rotate("B'");
            assert.deepEqual(cube.face, {
                U: [ 15, 12, 9, 3, 4, 5, 6, 7, 8 ],
                L: [ 42, 10, 11, 43, 13, 14, 44, 16, 17 ],
                F: [ 18, 19, 20, 21, 22, 23, 24, 25, 26 ],
                R: [ 27, 28, 0, 30, 31, 1, 33, 34, 2 ],
                D: [ 36, 37, 38, 39, 40, 41, 35, 32, 29 ],
                B: [ 47, 50, 53, 46, 49, 52, 45, 48, 51 ]
            });
        });
        it('U', () => {
            cube.rotate('U');
            assert.deepEqual(cube.face, {
                U: [ 6, 3, 0, 7, 4, 1, 8, 5, 2 ],
                L: [ 18, 19, 20, 12, 13, 14, 15, 16, 17 ],
                F: [ 27, 28, 29, 21, 22, 23, 24, 25, 26 ],
                R: [ 53, 52, 51, 30, 31, 32, 33, 34, 35 ],
                D: [ 36, 37, 38, 39, 40, 41, 42, 43, 44 ],
                B: [ 45, 46, 47, 48, 49, 50, 11, 10, 9 ]
            });
        });
        it("U'", () => {
            cube.rotate("U'");
            assert.deepEqual(cube.face, {
                U: [ 2, 5, 8, 1, 4, 7, 0, 3, 6 ],
                L: [ 53, 52, 51, 12, 13, 14, 15, 16, 17 ],
                F: [ 9, 10, 11, 21, 22, 23, 24, 25, 26 ],
                R: [ 18, 19, 20, 30, 31, 32, 33, 34, 35 ],
                D: [ 36, 37, 38, 39, 40, 41, 42, 43, 44 ],
                B: [ 45, 46, 47, 48, 49, 50, 29, 28, 27 ]
            });
        });
        it('D', () => {
            cube.rotate('D');
            assert.deepEqual(cube.face, {
                U: [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],
                L: [ 9, 10, 11, 12, 13, 14, 47, 46, 45 ],
                F: [ 18, 19, 20, 21, 22, 23, 15, 16, 17 ],
                R: [ 27, 28, 29, 30, 31, 32, 24, 25, 26 ],
                D: [ 42, 39, 36, 43, 40, 37, 44, 41, 38 ],
                B: [ 35, 34, 33, 48, 49, 50, 51, 52, 53 ]
            });
        });
        it("D'", () => {
            cube.rotate("D'");
            assert.deepEqual(cube.face, {
                U: [0, 1, 2, 3, 4, 5, 6, 7, 8 ],
                L: [9, 10, 11, 12, 13, 14, 24, 25, 26 ],
                F: [18, 19, 20, 21, 22, 23, 33, 34, 35 ],
                R: [27, 28, 29, 30, 31, 32, 47, 46, 45 ],
                D: [38, 41, 44, 37, 40, 43, 36, 39, 42 ],
                B: [17, 16, 15, 48, 49, 50, 51, 52, 53 ]
            });
        });
    });
});
